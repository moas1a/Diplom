# decrypt_db.py
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ passwords.enc ‚Üí passwords.db
–°–ø—Ä–æ—Å–∏—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å (–¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫), –∑–∞—Ç–µ–º —Ä–∞—Å—à–∏—Ñ—Ä—É–µ—Ç.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:
    python decrypt_db.py
"""

import os, sys, json, base64
from getpass import getpass
from cryptography.fernet import Fernet, InvalidToken
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes

CONFIG_FILE  = 'config.json'
ENCRYPTED_DB = 'passwords.enc'
PLAIN_DB     = 'passwords.db'
ITERATIONS   = 200_000
MAX_TRIES    = 3

def derive_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=ITERATIONS,
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

def load_config():
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            cfg = json.load(f)
        salt   = base64.b64decode(cfg['salt'])
        stored = base64.b64decode(cfg['hash'])
        return salt, stored
    except Exception as e:
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å config.json:', e)
        sys.exit(1)

def ask_master_password(salt, stored):
    for attempt in range(1, MAX_TRIES+1):
        pw = getpass(f'–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{MAX_TRIES}): ')
        key = derive_key(pw, salt)
        if key == stored:
            return key
        print('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.')
    print('üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫, –≤—ã—Ö–æ–¥–∏–º.')
    sys.exit(1)

def main():
    salt, stored = load_config()
    key = ask_master_password(salt, stored)

    if not os.path.exists(ENCRYPTED_DB):
        print(f'‚ùå –§–∞–π–ª {ENCRYPTED_DB} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        sys.exit(1)

    data = open(ENCRYPTED_DB, 'rb').read()
    fernet = Fernet(key)
    try:
        plain = fernet.decrypt(data)
    except InvalidToken:
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ: –≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.')
        sys.exit(1)

    with open(PLAIN_DB, 'wb') as f:
        f.write(plain)
    print(f'‚úÖ {PLAIN_DB} –≥–æ—Ç–æ–≤, –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –µ–≥–æ –≤ DB Browser.')
    sys.exit(0)

if __name__ == '__main__':
    main()
